stat_function(fun = dnorm, aes(colour = 'Normal'), args = list(mean = mean(mns), sd = sd(mns))) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
print(p0)
animation::ani.pause()
}
oopt = animation::ani.options(interval = 0.01, nmax = 100)
for(j in 1:animation::ani.options("nmax")){
mns <- NULL
for(i in 1:1000){mns[i] <- mean(rexp(j*2, .02))}
#   mns <- as.data.frame(mns)
#   mns$Sim <- seq(1, 1000, 1)
#   g <- ggplot(data = mns, aes(x = mns)) +
#               geom_histogram(aes(y = ..density..), binwidth = 1) +
#               geom_density(color = "red")
# #               stat_function(fun = dnorm,
# #                             args = list(mean = mean(mns$mns),
# #                                         sd = sd(mns$mns)))
p0 = qplot(mns, geom = 'blank') +
stat_function(fun = dnorm, aes(colour = 'Normal'), args = list(mean = mean(mns), sd = sd(mns))) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
print(p0)
animation::ani.pause()
}
oopt = animation::ani.options(interval = 0.01, nmax = 100)
for(j in 1:animation::ani.options("nmax")){
mns <- NULL
for(i in 1:1000){mns[i] <- mean(rexp(j*2, .02))}
#   mns <- as.data.frame(mns)
#   mns$Sim <- seq(1, 1000, 1)
#   g <- ggplot(data = mns, aes(x = mns)) +
#               geom_histogram(aes(y = ..density..), binwidth = 1) +
#               geom_density(color = "red")
# #               stat_function(fun = dnorm,
# #                             args = list(mean = mean(mns$mns),
# #                                         sd = sd(mns$mns)))
p0 = qplot(mns, geom = 'blank') +
stat_function(fun = dnorm, aes(colour = 'Normal'), args = list(mean = mean(mns), sd = sd(mns))) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
print(p0)
}
library(Rblpapi)
getTicks("SPX INDEX")
blpConnect()
getTicks("SPX INDEX")
mns <- NULL
for(i in 1:1000){mns[i] <- mean(rexp(j*2, .02))}
for(i in 1:1000){mns[i] <- mean(rexp(100, .02))}
p0 = qplot(mns, geom = 'blank') +
stat_function(fun = dnorm, aes(colour = 'Normal'), args = list(mean = mean(mns), sd = sd(mns))) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
p0 = ggplot2::qplot(mns, geom = 'blank') +
stat_function(fun = dnorm, aes(colour = 'Normal'), args = list(mean = mean(mns), sd = sd(mns))) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
library(ggplot2)
p0 = qplot(mns, geom = 'blank') +
stat_function(fun = dnorm, aes(colour = 'Normal'), args = list(mean = mean(mns), sd = sd(mns))) +
geom_histogram(aes(y = ..density..), alpha = 0.4)
print(p0)
install.packags("gtrendsR")
install.packages("gtrendsR")
user <- "jkassof@gmail.com"
psq <- "nadroj52"
gconnect(user, psw)
library(gtrendsR)
gconnect(user, psw)
gconnect(user, psq)
lang_trend <-gtrends(c("data is", "data are"), res = "week")
plot(lang_trend)
??gtrendsR
rm(list = ls())
DS_trend <-gtrends(c("data science", "predictive analytics", "big data", "predictive statistics"), res = "week")
plot(DS_trend)
DS_trend <-gtrends(c("data science", "predictive analytics", "big data"), res = "week")
plot(DS_trend)
install.packages("GtrendsR")
DS_trend <-gtrends(c("data science", "predictive analytics", "big data", "predictive statistics"))
rm(DS_trend)
DS_trend <-gtrends(c("data science", "predictive analytics", "big data", "predictive statistics"))
DS_trend <-gtrends(c("data science", "predictive analytics", "big data"), resolution = "countries")
plot(DS_trend)
plot(DS_trend, type = "regions")
plot(DS_trend, type = "topmetros")
summary(DS_trend)
DS_trend$cities
DS_trend$regions
DS_trend <-gtrends(c("data science", "predictive analytics", "big data", "hadoop"))
plot(DS_trend)
DS_trend <-gtrends(c("data science", "predictive analytics", "big data", "hadoop", "random forest", "regression", "neural network"))
DS_trend <-gtrends(c("big data", "hadoop", "random forest", "regression", "neural network"))
plot(DS_trend)
DS_trend <-gtrends(c("big data", "hadoop", "random forest", "neural network"))
plot(DS_trend)
library(installr)
ds <- gtrends(ch = ch, query = c("ux design",
"user experience",
"user experience design",
"visual design",
"human computer interaction"), res = "week")
library(gtrendsR)
gconnect("jkassof@gmail.com", "nadroj52")
ds <- gtrends(ch = ch, query = c("ux design",
"user experience",
"user experience design",
"visual design",
"human computer interaction"), res = "week")
ds <- gtrends(query = c("ux design",
"user experience",
"user experience design",
"visual design",
"human computer interaction"), res = "week")
plot(ds)
ds <- gtrends(ch = ch, query = c("ux design",
"user experience",
"user experience design",
"visual design",
"human-computer interaction"), res = "week")
plot(ds)
ds <- gtrends(query = c("ux design",
"user experience",
"user experience design",
"visual design",
"human-computer interaction"), res = "week")
plot(ds)
ds <- gtrends(query = c("ux design",
"user experience",
"user experience design",
"visual design",
"HCI"), res = "week")
plot(ds)
ds <- gtrends(query = c("ux design",
"user experience",
"ux",
"visual design",
"HCI"), res = "week")
plot(ds)
ds <- gtrends(query = c("ux design",
"user experience",
"graphic design",
"visual design",
"HCI"), res = "week")
plot(ds)
ds <- gtrends(query = c("ux design",
"user experience",
"information architecture",
"visual design",
"HCI"), res = "week")
plot(ds)
library(gtrendsR)
ds <- gtrends(ch = ch, query = c("data science",
"big data",
"machine learning",
"data mining",
"informatics"), res = "week")
gconnect("jkassof@gmailcom","nadroj52")
gconnect("jkassof@gmail.com","nadroj52")
ds <- gtrends(query = c("data science",
"big data",
"machine learning",
"data mining",
"informatics"), res = "week")
plot(ds, type = "region")
plot(ds, type = "topmetros")
plot(ds, type = "regions")
plot(ds, type = "cities")
dat <- url(http://www4.stat.ncsu.edu/~boos/var.select/german.data.txt)
dat <- url("http://www4.stat.ncsu.edu/~boos/var.select/german.data.txt")
dat <- read.table("http://www4.stat.ncsu.edu/~boos/var.select/german.data.txt"
,header = TRUE, sep = " ", na.strings = "NA", strip.white = TRUE)
dat <- read.table("http://www4.stat.ncsu.edu/~boos/var.select/german.data.txt"
,header = FALSE, sep = " ", na.strings = "NA", strip.white = TRUE)
fac.vars <- names(dat)[is.factor(names(dat))]
is.factor(dat)
is.factor(cols(dat))
names(dat)
is.factor(names.dat)
is.factor(names(dat))
class(names(dat))
class(dat[,1])
,header = TRUE, sep = ",", na.strings = "NA", strip.white = TRUE)
dat <- read.table("https://onlinecourses.science.psu.edu/stat857/sites/onlinecourses.science.psu.edu.stat857/files/german_credit.csv"
,header = TRUE, sep = ",", na.strings = "NA", strip.white = TRUE)
summary(dat)
library(caret); data(GermanCredit)
plot(GermanCredit$Class)
inTrain <- createDataPartition(GermanCredit$Class, p = 0.6, list = FALSE)
training <- GermanCredit[inTrain,]
testing <- GermanCredit[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
svm.fit <- train(Class ~ ., data = training,
method = "rf",
trControl = fitControl)
Q
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
rf.fit <- train(Class ~ ., data = training,
method = "rf",
trControl = fitControl)
install.packages("doMC")
library(doMC)
installr::updateR()
install.packages("doMC")
library(caret); data(GermanCredit)
plot(GermanCredit$Class)
inTrain <- createDataPartition(GermanCredit$Class, p = 0.6, list = FALSE)
training <- GermanCredit[inTrain,]
testing <- GermanCredit[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
rf.fit <- train(Class ~ ., data = training,
method = "rf",
trControl = fitControl)
summary(rf.fit)
rf.fit
confusionMatrix(predict(rf.fit, newdata = testing), testing$Class)
svm.fit <- train(Class ~ ., data = training,
method = "svmRadial",
trControl = fitControl,
tuneLength = 8,
metric = "ROC")
fitControl2 <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
classProbs = TRUE)
svm.fit <- train(Class ~ ., data = training,
method = "svmRadial",
trControl = fitControl2,
tuneLength = 8,
metric = "ROC")
svm.fit
confusionMatrix(predict(svm.fit, newdata = testing), testing$Class)
plot(svm.fit)
fitControl2 <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
svm.fit <- train(Class ~ ., data = training,
method = "svmRadial",
trControl = fitControl2,
tuneLength = 8,
metric = "ROC")
svm.fit
install.packages("doMC")
install.packages("doMC")
install.packages('doParallel')
cl<- makeCluster(detectCores())
library(caret); data(GermanCredit); library(doParallel)
cl<- makeCluster(detectCores())
registerDoParallel(cl)
inTrain <- createDataPartition(GermanCredit$Class, p = 0.6, list = FALSE)
training <- GermanCredit[inTrain,]
testing <- GermanCredit[-inTrain,]
## Random Forest Model
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
rf.fit <- train(Class ~ ., data = training,
method = "rf",
trControl = fitControl)
## SVM Model
fitControl2 <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
svm.fit <- train(Class ~ ., data = training,
method = "svmRadial",
trControl = fitControl2,
tuneLength = 8,
metric = "ROC")
rf.fit
svm.fit
preds.rf <- predict(rf.fit newdata = testing)
preds.rf <- predict(rf.fi,t newdata = testing)
preds.rf <- predict(rf.fit, newdata = testing)
rf.preds <- predict(rf.fit, newdata = testing)
postResample(rf.preds, testing$Class)
confusionMatrix(rf.preds, testing$Class)
confusionMatrix(rf.fit)
rf.preds <- predict(rf.fit, newdata = testing, type = "prob")
rf.preds$Class <- ifelse(test = Bad > .4, 1, 2)
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, 1, 2)
confusionMatrix(rf.preds$Class, testing$Class)
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, factor(1), factor(2))
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, factor(1), factor(2))
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, factor("Bad"), factor("Good")))
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, factor("Bad"), factor("Good"))
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, 1, 2))
rf.preds$Class <- ifelse(test = rf.preds$Bad > .4, 1, 2)
rf.preds$Class <- as.factor(ifelse(test = rf.preds$Bad > .4, 1, 2))
confusionMatrix(rf.preds$Class, testing$Class)
levels(rf.preds$Class) <- c("Bad", "Good")
confusionMatrix(rf.preds$Class, testing$Class)
rf.preds$Class <- as.factor(ifelse(test = rf.preds$Bad > .35, 1, 2))
levels(rf.preds$Class) <- c("Bad", "Good")
confusionMatrix(rf.preds$Class, testing$Class)
rf.preds$Class <- as.factor(ifelse(test = rf.preds$Bad > .4, 1, 2))
levels(rf.preds$Class) <- c("Bad", "Good")
confusionMatrix(rf.preds$Class, testing$Class)
rf.preds$Class <- as.factor(ifelse(test = rf.preds$Bad > .45, 1, 2))
levels(rf.preds$Class) <- c("Bad", "Good")
confusionMatrix(rf.preds$Class, testing$Class)
varImp(rf.fit)
varImp(svm.fit)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
rpart.fit <- train(Class ~ ., data = training,
method = "rpart",
trControl = fitControl)
plot(rpart.fit)
rpart.fit$finalModel
g <- ggplot(GermanCredit, aes(x = Class, y = Age) + geom_boxplot()
g <- ggplot(GermanCredit, aes(x = Class, y = Age)) + geom_boxplot()
g
g <- ggplot(GermanCredit, aes(x = Class, y = Age))
+ geom_jitter(alpha = 0.5, aes(color = Class), position = position_jitter(width = .2))
g
g <- ggplot(GermanCredit, aes(x = Class, y = Age))
g <- g + geom_jitter(alpha = 0.5, aes(color = Class), position = position_jitter(width = .2))
g
g <- g + geom_violin(alpha = 0.5, color = "gray")
g
g <- g + geom_jitter(alpha = 0.5, aes(color = Class), position = position_jitter(width = .2)) + coord_flip()
g <- ggplot(GermanCredit, aes(x = Class, y = Age))
g <- g + geom_violin(alpha = 0.5, color = "gray")
g <- g + geom_jitter(alpha = 0.5, aes(color = Class), position = position_jitter(width = .2)) + coord_flip()
g
rpart.fit <- rpart(Class ~ ., data = training)
plot(rpart.fit)
text(rpart.fit)
rpart.preds <- predict(rpart.fit, type = 'class', testing)
confusionMatrix(rpart.preds, testing$Class)
rpart.fit$variable.importance
install.packages('party')
library(party)
cfit <- ctree(class ~ ., data = training)
cfit <- ctree(class ~ ., data = as.matrix(training))
cfit <- ctree(Class ~ ., data = training)
plot(cfit)
library(caret); data("GermanCredit")
?GermanCredit
ggplot(GermanCredit, aes(x = Class, y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
geom_vline(xintercept = mean(GermanCredit$Age))
ggplot(GermanCredit, aes(x = Class, y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
geom_hline(xintercept = mean(GermanCredit$Age))
ggplot(GermanCredit, aes(x = Class, y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class)
ggplot(GermanCredit, aes(y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class)
ggplot(GermanCredit, aes(x = Class,y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class)
ggplot(GermanCredit, aes(x = Class,y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class) + geom_vline(xintercept = mean(GermanCredit$Class))
ggplot(GermanCredit, aes(x = Class,y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class) + geom_line(xintercept = mean(GermanCredit$Class))
ggplot(GermanCredit, aes(x = Class,y = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class) + geom_line(yintercept = mean(GermanCredit$Class))
ggplot(GermanCredit, aes(x = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class) + geom_line(xintercept = mean(GermanCredit$Class))
ggplot(GermanCredit, aes(x = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() +
facet_wrap(~Class)
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip()
ggplot(GermanCredit, aes(x = Duration, y = Amount, Color = Class) +
geom_point()
ggplot(GermanCredit, aes(x = Duration, y = Amount, Color = Class)) +
geom_point()
ggplot(GermanCredit, aes(x = Duration, y = Amount, Color = factor(Class))) +
geom_point()
ggplot(GermanCredit, aes(x = Duration, y = Amount, color = Class)) +
geom_point()
ggplot(GermanCredit, aes(x = Duration, y = Amount, color = Class)) +
geom_point() + facet(Class)
ggplot(GermanCredit, aes(x = Duration, y = Amount, color = Class)) +
geom_point() + facet(~Class)
ggplot(GermanCredit, aes(x = Duration, y = Amount, color = Class)) +
geom_point() + facet_wrap(~Class)
library(dplyr)
install.packages('gridExtra')
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() + ylabs('')
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() + labs(y ="")
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() + labs(x ="")
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() + labs(x ="")  +
legend("")
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() + labs(x ="")  +
legend(element_blank())
ggplot(GermanCredit, aes(x = Class, y  = Age)) +
geom_violin(alpha = 0.5, color = "gray") +
geom_jitter(alpha = 0.5, aes(color = Class), position =   position_jitter(width = .2)) + coord_flip() + labs(x ="")  +
theme(legend.position="none")
?grid.arrange
?gridExtra::grid.arrange
rpart.fit <- rpart(Class ~ ., data = training, method = 'class')
rpart.fit <- rpart::rpart(Class ~ ., data = training, method = 'class')
inTrain <- createDataPartition(GermanCredit$Class, p = 0.6, list = FALSE)
training <- GermanCredit[inTrain,]
testing <- GermanCredit[-inTrain,]
library(caret); data(GermanCredit); library(doParallel); library(ggplot2)
inTrain <- createDataPartition(GermanCredit$Class, p = 0.6, list = FALSE)
training <- GermanCredit[inTrain,]
testing <- GermanCredit[-inTrain,]
rpart.fit <- rpart::rpart(Class ~ ., data = training, method = 'class')
plot(rpart.fit)
text(rpart.fiot)
text(rpart.fit)
printcp(rpart.fit)
rpart::printcp(rpart.fit)
rpart.fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"]
rpart.fit$cptable[which.min(rpart.fit$cptable[,"xerror"]),"CP"]
rpart.fit$cptable
prune(fit, cp= rpart.fit$cptable[which.min(rpart.fit$cptable[,"xerror"]),"CP"] )
pruned.rpart <- rpart::prune(fit, cp= rpart.fit$cptable[which.min(rpart.fit$cptable[,"xerror"]),"CP"] )
pruned.rpart <- rpart::prune(rpart.fit, cp= rpart.fit$cptable[which.min(rpart.fit$cptable[,"xerror"]),"CP"] )
plot(pruned.rpart)
text(pruned.rpart)
printcp(rpart.fit)
library(rpart)
printcp(rpart.fit)
plotcp(rpart.fit)
summary(rpart.fit)
plot(rpart.fit, uniform = TRUE)
text(fit, use.n = TRUE, all = TRUE, cex = .8 )
text(rpart.fit, use.n = TRUE, all = TRUE, cex = .8 )
post(rpart.fit)
setwd("~/Projects/Credit Risk/Loan-Risk-Modeling")
post(rpart.fit, file = "tree.ps")
text(rpart.fit, use.n = TRUE, cex = .8 )
plot(rpart.fit, uniform = TRUE)
text(rpart.fit, use.n = TRUE, cex = .8 )
set.seed(1223) library(rpart)
rpart.fit <- rpart(Class ~ ., data = training, method = 'class')
plot(rpart.fit, uniform = TRUE, main = 'Credit Approval Decision Tree')
text(rpart.fit, cex = .65, use.n = TRUE)
set.seed(1223) library(rpart)
rpart.fit <- rpart(Class ~ ., data = training, method = 'class')
plot(rpart.fit, uniform = TRUE, main = 'Credit Approval Decision Tree')
text(rpart.fit, cex = .65, use.n = TRUE)
set.seed(2051) library(rpart)
rpart.fit <- rpart(Class ~ ., data = training, method = 'class')
plot(rpart.fit, uniform = TRUE, main = 'Credit Approval Decision Tree')
text(rpart.fit, cex = .65, use.n = TRUE)
set.seed(1223); library(rpart)
rpart.fit <- rpart(Class ~ ., data = training, method = 'class')
plot(rpart.fit, uniform = TRUE, main = 'Credit Approval Decision Tree')
text(rpart.fit, cex = .65, use.n = TRUE)
set.seed(2051); library(rpart)
rpart.fit <- rpart(Class ~ ., data = training, method = 'class')
plot(rpart.fit, uniform = TRUE, main = 'Credit Approval Decision Tree')
text(rpart.fit, cex = .65, use.n = TRUE)
confusionMatrix(predict(pruned.rpart, testing), testing$Class)
preds <- predict(pruned.rpart, testing)
preds <- predict(pruned.rpart, testing, type = 'class')
summary(testing)
table(testing)
table(testing, count = N(Class))
table(testing, count = c(Class))
table(testing, count = n(Class))
table(testing, count = n())
library(party)
ctree.fit <- ctree(Class ~ ., data = GermanCredit)
plot(ctree.fit)
varimp(ctree.fit)
cfor.fit <- cforest(Class ~ ., data = training)
summary(cfor.fit)
confusionMatrix(predict(cfor.fit, newdata = testing), testing$Class)
library(doParallel)
cl<- makeCluster(detectCores())
registerDoParallel(cl)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
rf.fit <- train(Class ~ ., data = training,
method = "rf",
trControl = fitControl)
?GermanCredit
View(GermanCredit)
